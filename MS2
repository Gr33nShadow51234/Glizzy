while game:GetService("Players").LocalPlayer == nil do task.wait() end
game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui",math.huge):WaitForChild("LoadingGui",math.huge)
while game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui",math.huge):FindFirstChild("LoadingGui") do task.wait() end



_G.ESP = false
_G.Manual = false
_G.oreFarm = false
_G.Egg = "Basic Egg"
_G.tripleHatch = false
_G.openEgg = false



local player = game:GetService("Players").LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local MineBlock = ReplicatedStorage.Events.MineBlock
local OpenEgg = ReplicatedStorage.Events.OpenEgg
local Teleport = ReplicatedStorage.Events.Teleport
local loadModule = require(ReplicatedStorage.LoadModule)
local RegionSize = 35
local Params = OverlapParams.new()
local oreFarmTable = {}
for i,v in pairs(ReplicatedStorage.Assets.ViewportItems:GetChildren()) do
    table.insert(oreFarmTable,v.Name)
end



local Mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/Gr33nShadow51234/Glizzy/main/Mercury"))()

local GUI = Mercury:Create{
    Name = "Mining Simulator 2 | GUI",
    Size = UDim2.fromOffset(600, 400),
    Theme = Mercury.Themes.Dark,
    Link = "https://imperatorweeds.de/"
}

local mainTab = GUI:Tab{
	Name = "Main",
	Icon = "rbxassetid://9741693218"
}

mainTab:Toggle{
	Name = "ESP",
	StartingState = _G.ESP,
	Description = nil,
	Callback = function(state)
        _G.ESP = state
        if _G.ESP then
            local BillboardGui = Instance.new("BillboardGui")
            local TextLabel = Instance.new("TextLabel")
            
            BillboardGui.Name = "esper"
            BillboardGui.Active = true
            BillboardGui.AlwaysOnTop = true
            BillboardGui.LightInfluence = 1
            BillboardGui.MaxDistance = 100
            BillboardGui.Size = UDim2.new(5, 0, 5, 0)
                    
            TextLabel.BackgroundTransparency = 1
            TextLabel.BorderSizePixel = 0
            TextLabel.Size = UDim2.new(1, 0, 1, 0)
            TextLabel.Font = Enum.Font.SourceSans
            TextLabel.Text = "Bug"
            TextLabel.TextScaled = true
            TextLabel.TextSize = 12
            TextLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.TextStrokeTransparency = 0
            TextLabel.TextWrapped = true
            while _G.ESP and task.wait() do
                for i,v in pairs(workspace.Decoration:GetChildren()) do
                    pcall(function()
                        if v:FindFirstChild("esper") == nil then
                            local a = BillboardGui:Clone()
                            local b = TextLabel:Clone()
                            a.Adornee = v
                            b.Text = v.Name
                            b.TextColor3 = v.Color
                            b.Parent = a
                            a.Parent = v
                        end
                    end)
                end
                for i,v in pairs(workspace.Chests:GetChildren()) do
                    pcall(function()
                        if v.PrimaryPart:FindFirstChild("esper") == nil then
                            local a = BillboardGui:Clone()
                            local b = TextLabel:Clone()
                            a.Adornee = v.PrimaryPart
                            b.Text = v.Name .. " Chest"
                            b.TextColor3 = v:WaitForChild("Visual",math.huge):FindFirstChildWhichIsA("MeshPart").Color
                            b.Parent = a
                            a.Parent = v.PrimaryPart
                        end
                    end)
                end
            end
        end
        for i,v in pairs(workspace.Decoration:GetChildren()) do
            pcall(function()
                v.esper:Destroy()
            end)
        end
        
        for i,v in pairs(workspace.Chests:GetChildren()) do
            pcall(function()
                v.PrimaryPart.esper:Destroy()
            end)
        end
    end
}

mainTab:Toggle{
	Name = "Manual",
	StartingState = _G.Manual,
	Description = "Farm stone manually",
	Callback = function(state)
        _G.Manual = state
    end
}

mainTab:Toggle{
	Name = "Ore Farm",
	StartingState = _G.oreFarm,
	Description = "Farm ores around you",
	Callback = function(state)
        _G.oreFarm = state
        while _G.oreFarm and task.wait() do
            pcall(function()
                local Parts = workspace:GetPartBoundsInRadius(player.Character.PrimaryPart.Position, RegionSize, Params)
                local foundOre = false
                for i, v in pairs(Parts) do
                    pcall(function()
                        if workspace.Chunks:IsAncestorOf(v) and table.find(oreFarmTable,v.Name) then
                            foundOre = true
                            MineBlock:FireServer(loadModule("ChunkUtil").worldToCell(v.Position))
                            task.wait()
                        end
                    end)
                end
                if not _G.Manual and not foundOre then
                    pcall(function()
                        MineBlock:FireServer(loadModule("ChunkUtil").worldToCell(player.Character.PrimaryPart.Position + Vector3.new(0,-5,0)))
                    end)
                end
            end)
        end
    end
}

local eggTab = GUI:Tab{
	Name = "Egg",
	Icon = "rbxassetid://9846818396"
}

local eggs = {}
for i,v in pairs(loadModule("Eggs")) do
    table.insert(eggs,i)
end
table.sort(eggs,function(eggA,eggB)
    return loadModule("Eggs")[eggA].Cost[2] < loadModule("Eggs")[eggB].Cost[2]
end)

eggTab:Dropdown{
	Name = "Choose Egg",
	StartingText = _G.Egg,
	Description = nil,
	Items = eggs,
	Callback = function(item) 
        _G.Egg = item
    end
}

eggTab:Toggle{
    Name = "x3 Hatch",
    StartingState = _G.tripleHatch,
    Description = nil,
    Callback = function(state)
        _G.tripleHatch = state 
    end
}

eggTab:Toggle{
	Name = "Open Egg",
	StartingState = _G.openEgg,
	Description = nil,
	Callback = function(state)
        _G.openEgg = state
        while _G.openEgg do
            OpenEgg:FireServer(_G.Egg,_G.tripleHatch)
            task.wait(2)
        end
    end
}
